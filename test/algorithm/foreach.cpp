// foreach.cpp
// Unit Test:
//  - cdl::algorithm::foreach()

#include <catch2/catch.hpp>
#include <cdl/algorithm/foreach.hpp>

#include <vector>

void increment(int& i)
{
    ++i;
}

struct increment_functor
{
    void operator()(int& i)
    {
        ++i;
    }
};

class increment_class
{
public:
    // NOTE: this member must be const in order to be used with std::invoke
    void member(int& i) const
    {
        ++i;
    }
};

TEST_CASE("cdl::algorithm::foreach() behaves as expected when callable is")
{
    using cdl::algorithm::foreach;

    std::vector<int> v{0, 1, 2};

    SECTION("a free function passed by value")
    {
        foreach(std::begin(v), std::end(v), increment);
        REQUIRE(v[0] == 1);
        REQUIRE(v[1] == 2);
        REQUIRE(v[2] == 3);
    }

    SECTION("a free function passed by address (function pointer)")
    {
        foreach(std::begin(v), std::end(v), &increment);
        REQUIRE(v[0] == 1);
        REQUIRE(v[1] == 2);
        REQUIRE(v[2] == 3);
    }

    SECTION("a class that overloads operator() (functor)")
    {
        foreach(std::begin(v), std::end(v), increment_functor{});
        REQUIRE(v[0] == 1);
        REQUIRE(v[1] == 2);
        REQUIRE(v[2] == 3);
    }

    SECTION("a closure generated by a lambda expression (functor)")
    {
        foreach(std::begin(v), std::end(v), [](int& i){ ++i; });
        REQUIRE(v[0] == 1);
        REQUIRE(v[1] == 2);
        REQUIRE(v[2] == 3);
    }

    SECTION("a pointer to member function")
    {
        increment_class obj{};
        foreach(std::begin(v), std::end(v), &increment_class::member, obj);
        REQUIRE(v[0] == 1);
        REQUIRE(v[1] == 2);
        REQUIRE(v[2] == 3);
    }
}